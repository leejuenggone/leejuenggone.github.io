{"version":3,"sources":["Components/Todotemplet.js","Components/Header.js","Components/Todolist.js","Components/Todoitem.js","Components/Todocreate.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Todos","styled","div","Todotemplet","children","Hederstyle","Header","data","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","Count","filter","item","content","length","TodoListBlock","Todolist","Remove","Span","span","Itembox","Todoitem","onCheck","onRemove","onSpan","useEffect","setTimeout","onClick","style","borderColor","color","text","Inputbox","CreateButton","Todocreate","input","onCh","onSubmit","create","onBox","autoFocus","onChange","placeholder","name","value","background","id","GlobalStyle","createGlobalStyle","App","useState","Data","setData","setInput","nextId","setNextId","setCreate","className","map","i","n","array","splice","key","e","target","preventDefault","push","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9b664d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Todos = styled.div`\r\n  width: 500px;\r\n  height: 600px;\r\n\r\n  background: #fff;\r\n  margin: 0 auto;\r\n\r\n  margin-top: 80px;\r\n\r\n  position: relative;\r\n\r\n  border-radius: 25px;\r\n\r\n  box-shadow: 5px 5px 12px 0px #d6d6d6;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction Todotemplet({ children }) {\r\n  return <Todos> {children} </Todos>;\r\n}\r\n\r\nexport default Todotemplet;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Hederstyle = styled.div`\r\n  padding: 20px 40px;\r\n  width: 100%;\r\n  text-align: left;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid #eee;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 30px;\r\n  }\r\n\r\n  p {\r\n    color: #555;\r\n    font-size: 18px;\r\n    font-weight: 500;\r\n  }\r\n  span {\r\n    color: #20c997;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nfunction Header({ data }) {\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', {\r\n    weekday: 'long',\r\n  });\r\n  let Count = data.filter((item) => {\r\n    return item.content === true;\r\n  });\r\n  return (\r\n    <Hederstyle>\r\n      <h1>{dateString}</h1>\r\n      <p>{dayName}</p>\r\n      <span>{'할 일 ' + Count.length + '개 남음'}</span>\r\n    </Hederstyle>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto; /* 사이즈 조정이 잘 되고 있는지 확인하기 위한 임시 스타일 */\r\n`;\r\n\r\nfunction Todolist({ children }) {\r\n  return <TodoListBlock>{children}</TodoListBlock>;\r\n}\r\n\r\nexport default Todolist;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nconst Remove = styled.div`\r\n  color: #ddd;\r\n  display: none;\r\n  line-height: 40px;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff0000;\r\n  }\r\n`;\r\nconst Span = styled.span`\r\n  font-size: 14px;\r\n  margin-left: 10px;\r\n  color: #ff6767;\r\n  font-weight: 900;\r\n`;\r\nconst Itembox = styled.div`\r\n  //   background: #333;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  &:hover {\r\n    ${Remove} {\r\n      display: block;\r\n    }\r\n  }\r\n  p {\r\n    flex: 1;\r\n    padding-left: 20px;\r\n    font-size: 20px;\r\n    margin: 0;\r\n    line-height: 40px;\r\n    font-weight: 500;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n    border: 4px solid #eee;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 40px;\r\n    background: none;\r\n    font-weight: 800;\r\n  }\r\n`;\r\n\r\nfunction Todoitem({ data, onCheck, onRemove, onSpan }) {\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      onSpan();\r\n    }, 2000);\r\n  }, []);\r\n  return (\r\n    <Itembox>\r\n      <button\r\n        onClick={onCheck}\r\n        style={{\r\n          borderColor: data.content ? '#eee' : '#20c997',\r\n          color: data.content ? '#eee' : '#20c997',\r\n        }}\r\n      >\r\n        {data.content ? '' : '✔'}\r\n      </button>\r\n      <p style={{ color: data.content ? 'black' : '#ddd' }}>\r\n        {data.text}\r\n        {data.span ? <Span>NEW!!</Span> : null}\r\n      </p>\r\n      <Remove onClick={onRemove}>삭제</Remove>\r\n    </Itembox>\r\n  );\r\n}\r\n\r\nexport default Todoitem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Inputbox = styled.div`\r\n  width: 100%;\r\n  height: 130px;\r\n  background: #f1f1f1;\r\n  border-radius: 0 0 25px 25px;\r\n  display: flex;\r\n  justify-content: center;\r\n  border-top: 2px solid #eee;\r\n  input {\r\n    margin-top: 20px;\r\n    width: 400px;\r\n    height: 50px;\r\n    border: none;\r\n    border-radius: 10px;\r\n    padding: 0 20px;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\nconst CreateButton = styled.div`\r\n  font-weight: 900;\r\n  text-align: center;\r\n  line-height: 70px;\r\n  font-size: 80px;\r\n  color: #fff;\r\n  width: 70px;\r\n  height: 70px;\r\n  border-radius: 70px;\r\n  position: absolute;\r\n  bottom: -35px;\r\n  left: 50%;\r\n  margin-left: -35px;\r\n  border: none;\r\n  //   background: #20c997;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: #49e0b3;\r\n    transition: 0.125s all ease-in;\r\n  }\r\n`;\r\nfunction Todocreate({ input, onCh, onSubmit, create, onBox }) {\r\n  return (\r\n    <>\r\n      {create === true ? (\r\n        <Inputbox>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              autoFocus\r\n              onChange={onCh}\r\n              placeholder=\"할 일을 입력후,엔터를 누르세요\"\r\n              name=\"text\"\r\n              value={input}\r\n            />\r\n          </form>\r\n        </Inputbox>\r\n      ) : null}\r\n      <CreateButton\r\n        onClick={onBox}\r\n        style={{\r\n          background: create ? '#ff6767' : '#49e0b3',\r\n        }}\r\n      >\r\n        +\r\n      </CreateButton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todocreate;\r\n","export default [{\r\n        id: 0,\r\n        text: '오늘 할 일 첫번째',\r\n        content: true,\r\n        span: false\r\n    },\r\n\r\n    {\r\n        id: 1,\r\n        text: '오늘 할 일 두번째',\r\n        content: true,\r\n        span: false\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        text: '오늘 할 일 세번째',\r\n        content: true,\r\n        span: false\r\n    },\r\n\r\n]","import React, { useState } from 'react';\nimport './App.css';\nimport Todotemplet from './Components/Todotemplet.js';\nimport Header from './Components/Header.js';\nimport Todolist from './Components/Todolist.js';\nimport Todoitem from './Components/Todoitem.js';\nimport Todocreate from './Components/Todocreate.js';\nimport Data from './Data.js';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  const [data, setData] = useState(Data);\n  const [input, setInput] = useState('');\n  const [nextId, setNextId] = useState(2);\n  const [create, setCreate] = useState(false);\n  const onSpan = (n) => {\n    let array = [...data];\n    array[n].span = false;\n    setData(array);\n  };\n  const onBox = () => {\n    setCreate(!create);\n  };\n  const onCh = (e) => {\n    setInput(e.target.value);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault(); // 새로고침 방지\n    let array = [...data];\n    array.push({\n      id: nextId + 1,\n      text: input,\n      content: true,\n      span: true,\n    });\n    setData(array);\n    setInput('');\n    setNextId(nextId + 1);\n    setCreate(!create);\n    console.log(data);\n  };\n  const onCheck = (n) => {\n    let array = [...data];\n    array[n].content = !array[n].content;\n    setData(array);\n  };\n  const onRemove = (n) => {\n    let array = [...data];\n    array.splice(n, 1);\n    setData(array);\n  };\n  ///\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Todotemplet>\n        <Header data={data} />\n        <Todolist>\n          {data.map((item, i) => {\n            return (\n              <Todoitem\n                onSpan={() => {\n                  onSpan(i);\n                }}\n                onRemove={() => {\n                  onRemove(i);\n                }}\n                data={data[i]}\n                key={i}\n                onCheck={() => {\n                  onCheck(i);\n                }}\n              />\n            );\n          })}\n        </Todolist>\n        <Todocreate\n          create={create}\n          input={input}\n          onCh={onCh}\n          onSubmit={onSubmit}\n          onBox={onBox}\n        />\n      </Todotemplet>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}